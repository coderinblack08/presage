// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  username      String     @unique
  accounts      Account[]
  sessions      Session[]
  drafts        Draft[]
  folders       Folder[]
  Reaction      Reaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Folder?  @relation("SubFolders", fields: [parentId], references: [id], onDelete: Cascade)
  children Folder[] @relation("SubFolders")
  drafts   Draft[]
}

model Draft {
  id           String   @id @default(cuid())
  title        String
  content      Json?
  tags         String[]
  canonicalUrl String?
  description  String?

  paywalled Boolean  @default(false)
  published Boolean  @default(false)
  private   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folderId String?
  folder   Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  // tags     DraftOnTags[]
  Reaction Reaction[]
}

model ReactionCount {
  draftId   String
  type      ReactionType
  count     Int
  createdAt DateTime     @default(now())

  @@id([draftId, type])
}

enum ReactionType {
  Favorite
  Bookmark
  Share
}

model Reaction {
  type      ReactionType
  draftId   String
  draft     Draft        @relation(fields: [draftId], references: [id], onDelete: Cascade)
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())

  @@id([type, draftId, userId])
}

// model Tag {
//   id        String   @id @default(cuid())
//   name      String   @unique
//   createdAt DateTime @default(now())

//   draftId String
//   drafts  DraftOnTags[]
// }

// model DraftOnTags {
//   draftId String
//   tagId   String
//   draft   Draft  @relation(fields: [draftId], references: [id], onDelete: Cascade)
//   tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

//   @@id([draftId, tagId])
// }
