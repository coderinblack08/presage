{"version":3,"file":"readFromStore.js","sourceRoot":"","sources":["../../../src/cache/inmemory/readFromStore.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DocumentNode,\n  FieldNode,\n  SelectionSetNode,\n} from 'graphql';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport {\n  isField,\n  resultKeyNameFromField,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n  createFragmentMap,\n  FragmentMap,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getQueryDefinition,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  getFragmentFromSelection,\n} from '../../utilities';\nimport { Cache } from '../core/types/Cache';\nimport {\n  DiffQueryAgainstStoreOptions,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from './types';\nimport { supportsResultCaching } from './entityStore';\nimport { getTypenameFromStoreObject } from './helpers';\nimport { Policies } from './policies';\nimport { InMemoryCache } from './inMemoryCache';\nimport { MissingFieldError } from '../core/types/common';\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  fragmentMap: FragmentMap;\n  path: (string | number)[];\n  clientOnly: boolean;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingFieldError[];\n};\n\nfunction missingFromInvariant(\n  err: InvariantError,\n  context: ReadContext,\n) {\n  return new MissingFieldError(\n    err.message,\n    context.path.slice(),\n    context.query,\n    context.clientOnly,\n    context.variables,\n  );\n}\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: any[];\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache,\n  addTypename?: boolean;\n}\n\nexport class StoreReader {\n  constructor(private config: StoreReaderConfig) {\n    this.config = { addTypename: true, ...config };\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = 'ROOT_QUERY',\n    variables,\n    returnPartialData = true,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables,\n    };\n\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: makeReference(rootId),\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: JSON.stringify(variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        path: [],\n        clientOnly: false,\n      },\n    });\n\n    const hasMissingFields =\n      execResult.missing && execResult.missing.length > 0;\n    if (hasMissingFields && !returnPartialData) {\n      throw execResult.missing![0];\n    }\n\n    return {\n      result: execResult.result,\n      missing: execResult.missing,\n      complete: !hasMissingFields,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext,\n  ): boolean {\n    if (supportsResultCaching(context.store) &&\n        this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(selectionSet, parent, context);\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Cached version of execSelectionSetImpl.\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    // Arguments type after keyArgs translation.\n    [SelectionSetNode, StoreObject | Reference, ReadMergeModifyContext]\n  > = wrap(options => this.execSelectionSetImpl(options), {\n    keyArgs(options) {\n      return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n      ];\n    },\n    // Note that the parameters of makeCacheKey are determined by the\n    // array returned by keyArgs.\n    makeCacheKey(selectionSet, parent, context) {\n      if (supportsResultCaching(context.store)) {\n        return context.store.makeCacheKey(\n          selectionSet,\n          isReference(parent) ? parent.__ref : parent,\n          context.varString,\n        );\n      }\n    }\n  });\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (isReference(objectOrReference) &&\n        !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n        !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: {},\n        missing: [missingFromInvariant(\n          new InvariantError(\n            `Dangling reference to missing ${objectOrReference.__ref} object`\n          ),\n          context,\n        )],\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const objectsToMerge: { [key: string]: any }[] = [];\n    const finalResult: ExecResult = { result: null };\n    const typename = store.getFieldValue<string>(objectOrReference, \"__typename\");\n\n    if (this.config.addTypename &&\n        typeof typename === \"string\" &&\n        !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function getMissing() {\n      return finalResult.missing || (finalResult.missing = []);\n    }\n\n    function handleMissing<T>(result: ExecResult<T>): T {\n      if (result.missing) getMissing().push(...result.missing);\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference,\n        }, context);\n\n        const resultName = resultKeyNameFromField(selection);\n        context.path.push(resultName);\n\n        // If this field has an @client directive, then the field and\n        // everything beneath it is client-only, meaning it will never be\n        // sent to the server.\n        const wasClientOnly = context.clientOnly;\n        // Once we enter a client-only subtree of the query, we can avoid\n        // repeatedly checking selection.directives.\n        context.clientOnly = wasClientOnly || !!(\n          // We don't use the hasDirectives helper here, because it looks\n          // for directives anywhere inside the AST node, whereas we only\n          // care about directives directly attached to this field.\n          selection.directives &&\n          selection.directives.some(d => d.name.value === \"client\")\n        );\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            getMissing().push(\n              missingFromInvariant(\n                new InvariantError(`Can't find field '${\n                  selection.name.value\n                }' on ${\n                  isReference(objectOrReference)\n                    ? objectOrReference.__ref + \" object\"\n                    : \"object \" + JSON.stringify(objectOrReference, null, 2)\n                }`),\n                context,\n              ),\n            );\n          }\n\n        } else if (Array.isArray(fieldValue)) {\n          fieldValue = handleMissing(this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            context,\n          }));\n\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. However, that value should not contain any\n          // Reference objects, and should be frozen in development, if it\n          // happens to be an object that is mutable.\n          if (process.env.NODE_ENV !== 'production') {\n            assertSelectionSetForIdValue(\n              context.store,\n              selection,\n              fieldValue,\n            );\n            maybeDeepFreeze(fieldValue);\n          }\n\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue as StoreObject | Reference,\n            context,\n          }));\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n\n        context.clientOnly = wasClientOnly;\n\n        invariant(context.path.pop() === resultName);\n\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    // Perform a single merge at the end so that we can avoid making more\n    // defensive shallow copies than necessary.\n    finalResult.result = mergeDeepArray(objectsToMerge);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    this.knownResults.set(finalResult.result, selectionSet);\n\n    return finalResult;\n  }\n\n  private knownResults = new WeakMap<Record<string, any>, SelectionSetNode>();\n\n  // Cached version of execSubSelectedArrayImpl.\n  private executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n    return this.execSubSelectedArrayImpl(options);\n  }, {\n    makeCacheKey({ field, array, context }) {\n      if (supportsResultCaching(context.store)) {\n        return context.store.makeCacheKey(\n          field,\n          array,\n          context.varString,\n        );\n      }\n    }\n  });\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingFieldError[] | undefined;\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push(...childResult.missing);\n      }\n\n      invariant(context.path.pop() === i);\n\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      context.path.push(i);\n\n      // This is a nested array, recurse\n      if (Array.isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          context,\n        }), i);\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          context,\n        }), i);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      invariant(context.path.pop() === i);\n\n      return item;\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n\n    return { result: array, missing };\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any,\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (value && typeof value === \"object\") {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type ${\n            getTypenameFromStoreObject(store, value)\n          } returned for query field ${field.name.value}`,\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n"]}