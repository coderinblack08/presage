{"version":3,"file":"subscribeAndCount.js","sourceRoot":"","sources":["../../../src/utilities/testing/subscribeAndCount.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,sCAAsC,CAAC;AAEhE,MAAM,CAAC,OAAO,UAAU,iBAAiB,CACvC,MAA4B,EAC5B,UAAgC,EAChC,EAAgE;IAGhE,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IAC9B,IAAI,WAAW,GAAG,CAAC,CAAC;IAEpB,IAAM,YAAY,GAAG,QAAQ,CAC3B,UAAU,EACV,UAAC,MAA8B;QAG7B,OAAO,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;YACxB,OAAO,EAAE,CAAC,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC,CACF,CAAC,SAAS,CAAC,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;IAEvB,SAAS,KAAK,CAAC,CAAM;QACnB,YAAY,CAAC,WAAW,EAAE,CAAC;QAC3B,MAAM,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import { ObservableQuery } from '../../core/ObservableQuery';\nimport { ApolloQueryResult } from '../../core/types';\nimport { ObservableSubscription } from '../../utilities/observables/Observable';\nimport { asyncMap } from '../../utilities/observables/asyncMap';\n\nexport default function subscribeAndCount(\n  reject: (reason: any) => any,\n  observable: ObservableQuery<any>,\n  cb: (handleCount: number, result: ApolloQueryResult<any>) => any,\n): ObservableSubscription {\n  // Use a Promise queue to prevent callbacks from being run out of order.\n  let queue = Promise.resolve();\n  let handleCount = 0;\n\n  const subscription = asyncMap(\n    observable,\n    (result: ApolloQueryResult<any>) => {\n      // All previous asynchronous callbacks must complete before cb can\n      // be invoked with this result.\n      return queue = queue.then(() => {\n        return cb(++handleCount, result);\n      }).catch(error);\n    },\n  ).subscribe({ error });\n\n  function error(e: any) {\n    subscription.unsubscribe();\n    reject(e);\n  }\n\n  return subscription;\n}\n"]}