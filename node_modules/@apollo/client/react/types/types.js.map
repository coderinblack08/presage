{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/react/types/types.ts"],"names":[],"mappings":"","sourcesContent":["import { ReactNode } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { Observable } from '../../utilities';\nimport { FetchResult } from '../../link/core';\nimport { ApolloClient } from '../../core';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  ErrorPolicy,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  FetchPolicy,\n  MutationUpdaterFn,\n  NetworkStatus,\n  ObservableQuery,\n  OperationVariables,\n  PureQueryOptions,\n  WatchQueryFetchPolicy,\n} from '../../core';\n\n/* Common types */\n\nexport type Context = Record<string, any>;\n\nexport type CommonOptions<TOptions> = TOptions & {\n  client?: ApolloClient<object>;\n};\n\n/* Query types */\n\nexport interface BaseQueryOptions<TVariables = OperationVariables> {\n  ssr?: boolean;\n  variables?: TVariables;\n  fetchPolicy?: WatchQueryFetchPolicy;\n  nextFetchPolicy?: WatchQueryFetchPolicy;\n  errorPolicy?: ErrorPolicy;\n  pollInterval?: number;\n  client?: ApolloClient<any>;\n  notifyOnNetworkStatusChange?: boolean;\n  context?: Context;\n  partialRefetch?: boolean;\n  returnPartialData?: boolean;\n}\n\nexport interface QueryFunctionOptions<\n  TData = any,\n  TVariables = OperationVariables\n> extends BaseQueryOptions<TVariables> {\n  displayName?: string;\n  skip?: boolean;\n  onCompleted?: (data: TData) => void;\n  onError?: (error: ApolloError) => void;\n}\n\nexport type ObservableQueryFields<TData, TVariables> = Pick<\n  ObservableQuery<TData, TVariables>,\n  | 'startPolling'\n  | 'stopPolling'\n  | 'subscribeToMore'\n  | 'updateQuery'\n  | 'refetch'\n  | 'variables'\n> & {\n  fetchMore: (<K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => Promise<ApolloQueryResult<TData>>) &\n    (<TData2, TVariables2, K extends keyof TVariables2>(\n      fetchMoreOptions: { query?: DocumentNode | TypedDocumentNode<TData, TVariables> } & FetchMoreQueryOptions<\n        TVariables2,\n        K,\n        TData\n      > &\n        FetchMoreOptions<TData2, TVariables2>\n    ) => Promise<ApolloQueryResult<TData2>>);\n};\n\nexport interface QueryResult<TData = any, TVariables = OperationVariables>\n  extends ObservableQueryFields<TData, TVariables> {\n  client: ApolloClient<any>;\n  data: TData | undefined;\n  previousData?: TData;\n  error?: ApolloError;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  called: true;\n}\n\nexport interface QueryDataOptions<TData = any, TVariables = OperationVariables>\n  extends QueryFunctionOptions<TData, TVariables> {\n  children?: (result: QueryResult<TData, TVariables>) => ReactNode;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface QueryHookOptions<TData = any, TVariables = OperationVariables>\n  extends QueryFunctionOptions<TData, TVariables> {\n  query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface LazyQueryHookOptions<\n  TData = any,\n  TVariables = OperationVariables\n> extends Omit<QueryFunctionOptions<TData, TVariables>, 'skip'> {\n  query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface QueryLazyOptions<TVariables> {\n  variables?: TVariables;\n  context?: Context;\n}\n\ntype UnexecutedLazyFields = {\n  loading: false;\n  networkStatus: NetworkStatus.ready;\n  called: false;\n  data: undefined;\n  previousData?: undefined;\n}\n\ntype Impartial<T> = {\n  [P in keyof T]?: never;\n}\n\ntype AbsentLazyResultFields =\n  Omit<\n    Impartial<QueryResult<unknown, unknown>>,\n    keyof UnexecutedLazyFields>\n\ntype UnexecutedLazyResult =\n   UnexecutedLazyFields & AbsentLazyResultFields\n\nexport type LazyQueryResult<TData, TVariables> =\n  | UnexecutedLazyResult\n  | QueryResult<TData, TVariables>;\n\nexport type QueryTuple<TData, TVariables> = [\n  (options?: QueryLazyOptions<TVariables>) => void,\n  LazyQueryResult<TData, TVariables>\n];\n\n/* Mutation types */\n\nexport type RefetchQueriesFunction = (\n  ...args: any[]\n) => Array<string | PureQueryOptions>;\n\nexport interface BaseMutationOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  variables?: TVariables;\n  optimisticResponse?: TData | ((vars: TVariables) => TData);\n  refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesFunction;\n  awaitRefetchQueries?: boolean;\n  errorPolicy?: ErrorPolicy;\n  update?: MutationUpdaterFn<TData>;\n  client?: ApolloClient<object>;\n  notifyOnNetworkStatusChange?: boolean;\n  context?: Context;\n  onCompleted?: (data: TData) => void;\n  onError?: (error: ApolloError) => void;\n  fetchPolicy?: Extract<WatchQueryFetchPolicy, 'no-cache'>;\n  ignoreResults?: boolean;\n}\n\nexport interface MutationFunctionOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  variables?: TVariables;\n  optimisticResponse?: TData | ((vars: TVariables) => TData);\n  refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesFunction;\n  awaitRefetchQueries?: boolean;\n  update?: MutationUpdaterFn<TData>;\n  context?: Context;\n  fetchPolicy?: WatchQueryFetchPolicy;\n}\n\nexport interface MutationResult<TData = any> {\n  data?: TData | null;\n  error?: ApolloError;\n  loading: boolean;\n  called: boolean;\n  client: ApolloClient<object>;\n}\n\nexport declare type MutationFunction<\n  TData = any,\n  TVariables = OperationVariables\n> = (\n  options?: MutationFunctionOptions<TData, TVariables>\n) => Promise<FetchResult<TData>>;\n\nexport interface MutationHookOptions<\n  TData = any,\n  TVariables = OperationVariables\n> extends BaseMutationOptions<TData, TVariables> {\n  mutation?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface MutationDataOptions<TData = any, TVariables = OperationVariables>\n  extends BaseMutationOptions<TData, TVariables> {\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport type MutationTuple<TData, TVariables> = [\n  (\n    options?: MutationFunctionOptions<TData, TVariables>\n  ) => Promise<FetchResult<TData>>,\n  MutationResult<TData>\n];\n\n/* Subscription types */\n\nexport interface OnSubscriptionDataOptions<TData = any> {\n  client: ApolloClient<object>;\n  subscriptionData: SubscriptionResult<TData>;\n}\n\nexport interface BaseSubscriptionOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  variables?: TVariables;\n  fetchPolicy?: FetchPolicy;\n  shouldResubscribe?:\n    | boolean\n    | ((options: BaseSubscriptionOptions<TData, TVariables>) => boolean);\n  client?: ApolloClient<object>;\n  skip?: boolean;\n  context?: Context;\n  onSubscriptionData?: (options: OnSubscriptionDataOptions<TData>) => any;\n  onSubscriptionComplete?: () => void;\n}\n\nexport interface SubscriptionResult<TData = any> {\n  loading: boolean;\n  data?: TData;\n  error?: ApolloError;\n}\n\nexport interface SubscriptionHookOptions<\n  TData = any,\n  TVariables = OperationVariables\n> extends BaseSubscriptionOptions<TData, TVariables> {\n  subscription?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface SubscriptionDataOptions<\n  TData = any,\n  TVariables = OperationVariables\n> extends BaseSubscriptionOptions<TData, TVariables> {\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  children?: null | ((result: SubscriptionResult<TData>) => JSX.Element | null);\n}\n\nexport interface SubscriptionCurrentObservable {\n  query?: Observable<any>;\n  subscription?: ZenObservable.Subscription;\n}\n"]}