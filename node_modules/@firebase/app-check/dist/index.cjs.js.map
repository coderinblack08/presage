{"version":3,"file":"index.cjs.js","sources":["../src/errors.ts","../src/state.ts","../src/util.ts","../src/recaptcha.ts","../src/api.ts","../src/constants.ts","../src/proactive-refresh.ts","../src/client.ts","../src/indexeddb.ts","../src/logger.ts","../src/storage.ts","../src/debug.ts","../src/internal-api.ts","../src/factory.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_ACTIVATED = 'already-activated',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_ACTIVATED]:\n    'You are trying to activate AppCheck for FirebaseApp {$appName}, ' +\n    'while it is already activated. ' +\n    'AppCheck can only be activated once.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' +\n    'Please make sure you call activate() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_ACTIVATED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { AppCheckProvider, AppCheckToken } from '@firebase/app-check-types';\nimport { AppCheckTokenListener } from '@firebase/app-check-interop-types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\n\nexport interface AppCheckTokenInternal extends AppCheckToken {\n  issuedAtTimeMillis: number;\n}\nexport interface AppCheckState {\n  activated: boolean;\n  tokenListeners: AppCheckTokenListener[];\n  customProvider?: AppCheckProvider;\n  siteKey?: string;\n  token?: AppCheckTokenInternal;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenListeners: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\n\nexport function getRecaptcha(): GreCAPTCHA | undefined {\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\n\nexport function initialize(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n\n  const grecaptcha = getRecaptcha();\n  if (!grecaptcha) {\n    loadReCAPTCHAScript(() => {\n      const grecaptcha = getRecaptcha();\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      grecaptcha.ready(() => {\n        // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\n        renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n        initialized.resolve(grecaptcha);\n      });\n    });\n  } else {\n    grecaptcha.ready(() => {\n      renderInvisibleWidget(app, siteKey, grecaptcha, divId);\n      initialized.resolve(grecaptcha);\n    });\n  }\n\n  return initialized.promise;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = `${RECAPTCHA_URL}`;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHA | undefined;\n  }\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheckProvider } from '@firebase/app-check-types';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { initialize as initializeRecaptcha } from './recaptcha';\nimport { getState, setState, AppCheckState } from './state';\n\n/**\n *\n * @param app\n * @param siteKeyOrProvider - optional custom attestation provider\n * or reCAPTCHA siteKey\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\n * of appCheck token.\n */\nexport function activate(\n  app: FirebaseApp,\n  siteKeyOrProvider: string | AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n  if (state.activated) {\n    throw ERROR_FACTORY.create(AppCheckError.ALREADY_ACTIVATED, {\n      appName: app.name\n    });\n  }\n\n  const newState: AppCheckState = { ...state, activated: true };\n  if (typeof siteKeyOrProvider === 'string') {\n    newState.siteKey = siteKeyOrProvider;\n  } else {\n    newState.customProvider = siteKeyOrProvider;\n  }\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  // initialize reCAPTCHA if siteKey is provided\n  if (newState.siteKey) {\n    initializeRecaptcha(app, newState.siteKey).catch(() => {\n      /* we don't care about the initialization result in activate() */\n    });\n  }\n}\n\nexport function setTokenAutoRefreshEnabled(\n  app: FirebaseApp,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1beta';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  attestationToken: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If platform logger exists, add the platform info string to the header.\n  const platformLogger = platformLoggerProvider.getImmediate({\n    optional: true\n  });\n  if (platformLogger) {\n    headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: originalError.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.attestationToken,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      recaptcha_token: reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './state';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: e.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './state';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from indexeddb. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to indexeddb. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to indexeddb. Error: ${e}`)\n    );\n    // Not using logger because I don't think we ever want this accidentally hidden?\n    console.log(\n      `AppCheck debug token: ${newToken}. You will need to whitelist it in the Firebase console for it to work`\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  const debugState = getDebugState();\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getToken as getReCAPTCHAToken } from './recaptcha';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenListener\n} from '@firebase/app-check-interop-types';\nimport {\n  AppCheckTokenInternal,\n  getDebugState,\n  getState,\n  setState\n} from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport {\n  exchangeToken,\n  getExchangeDebugTokenRequest,\n  getExchangeRecaptchaTokenRequest\n} from './client';\nimport { writeTokenToStorage, readTokenFromStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64, issuedAtTime } from '@firebase/util';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { logger } from './logger';\nimport { Provider } from '@firebase/component';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function will always resolve.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  ensureActivated(app);\n  /**\n   * DEBUG MODE\n   * return the debug token directly\n   */\n  if (isDebugMode()) {\n    const tokenFromDebugExchange: AppCheckTokenInternal = await exchangeToken(\n      getExchangeDebugTokenRequest(app, await getDebugToken()),\n      platformLoggerProvider\n    );\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  const state = getState(app);\n\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * try to load token from indexedDB if it's the first time this function is called\n   */\n  if (!token) {\n    // readTokenFromStorage() always resolves. In case of an error, it resolves with `undefined`.\n    const cachedToken = await readTokenFromStorage(app);\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n\n      setState(app, { ...state, token });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: token.token });\n    }\n  }\n\n  // return the cached token if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    if (state.customProvider) {\n      const customToken = await state.customProvider.getToken();\n      // Try to extract IAT from custom token, in case this token is not\n      // being newly issued. JWT timestamps are in seconds since epoch.\n      const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n      // Very basic validation, use current timestamp as IAT if JWT\n      // has no `iat` field or value is out of bounds.\n      const issuedAtTimeMillis =\n        issuedAtTimeSeconds !== null &&\n        issuedAtTimeSeconds < Date.now() &&\n        issuedAtTimeSeconds > 0\n          ? issuedAtTimeSeconds * 1000\n          : Date.now();\n\n      token = { ...customToken, issuedAtTimeMillis };\n    } else {\n      const attestedClaimsToken = await getReCAPTCHAToken(app).catch(_e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      });\n      token = await exchangeToken(\n        getExchangeRecaptchaTokenRequest(app, attestedClaimsToken),\n        platformLoggerProvider\n      );\n    }\n  } catch (e) {\n    // `getToken()` should never throw, but logging error text to console will aid debugging.\n    logger.error(e);\n    error = e;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well ashe persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  notifyTokenListeners(app, interopTokenResult);\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>,\n  listener: AppCheckTokenListener\n): void {\n  const state = getState(app);\n  const newState = {\n    ...state,\n    tokenListeners: [...state.tokenListeners, listener]\n  };\n\n  /**\n   * DEBUG MODE\n   *\n   * invoke the listener once with the debug token.\n   */\n  if (isDebugMode()) {\n    const debugState = getDebugState();\n    if (debugState.enabled && debugState.token) {\n      debugState.token.promise\n        .then(token => listener({ token }))\n        .catch(() => {\n          /* we don't care about exceptions thrown in listeners */\n        });\n    }\n  } else {\n    /**\n     * PROD MODE\n     *\n     * invoke the listener with the valid token, then start the token refresher\n     */\n    if (!newState.tokenRefresher) {\n      const tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\n      newState.tokenRefresher = tokenRefresher;\n    }\n\n    // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n    // is not true.\n    if (\n      !newState.tokenRefresher.isRunning() &&\n      state.isTokenAutoRefreshEnabled === true\n    ) {\n      newState.tokenRefresher.start();\n    }\n\n    // invoke the listener async immediately if there is a valid token\n    if (state.token && isValid(state.token)) {\n      const validToken = state.token;\n      Promise.resolve()\n        .then(() => listener({ token: validToken.token }))\n        .catch(() => {\n          /* we don't care about exceptions thrown in listeners */\n        });\n    }\n  }\n\n  setState(app, newState);\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getState(app);\n\n  const newListeners = state.tokenListeners.filter(l => l !== listener);\n  if (\n    newListeners.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenListeners: newListeners\n  });\n}\n\nfunction createTokenRefresher(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): Refresher {\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(app, platformLoggerProvider);\n      } else {\n        result = await getToken(app, platformLoggerProvider, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      // TODO: when should we retry?\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nfunction notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const listeners = getState(app).tokenListeners;\n\n  for (const listener of listeners) {\n    try {\n      listener(token);\n    } catch (e) {\n      // If any handler fails, ignore and run next handler.\n    }\n  }\n}\n\nfunction isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAppCheck, AppCheckProvider } from '@firebase/app-check-types';\nimport { activate, setTokenAutoRefreshEnabled } from './api';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseAppCheckInternal } from '@firebase/app-check-interop-types';\nimport {\n  getToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\n\nexport function factory(app: FirebaseApp): FirebaseAppCheck {\n  return {\n    activate: (\n      siteKeyOrProvider: string | AppCheckProvider,\n      isTokenAutoRefreshEnabled?: boolean\n    ) => activate(app, siteKeyOrProvider, isTokenAutoRefreshEnabled),\n    setTokenAutoRefreshEnabled: (isTokenAutoRefreshEnabled: boolean) =>\n      setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled)\n  };\n}\n\nexport function internalFactory(\n  app: FirebaseApp,\n  platformLoggerProvider: Provider<'platform-logger'>\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh =>\n      getToken(app, platformLoggerProvider, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(app, platformLoggerProvider, listener),\n    removeTokenListener: listener => removeTokenListener(app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport {\n  FirebaseAppCheck,\n  AppCheckComponentName\n} from '@firebase/app-check-types';\nimport { factory, internalFactory } from './factory';\nimport { initializeDebugMode } from './debug';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { name, version } from '../package.json';\n\nconst APP_CHECK_NAME: AppCheckComponentName = 'appCheck';\nconst APP_CHECK_NAME_INTERNAL: AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(firebase: _FirebaseNamespace): void {\n  // The public interface\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        return factory(app);\n      },\n      ComponentType.PUBLIC\n    )\n      /**\n       * AppCheck can only be initialized by explicitly calling firebase.appCheck()\n       * We don't want firebase products that consume AppCheck to gate on AppCheck\n       * if the user doesn't intend them to, just because the AppCheck component\n       * is registered.\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on app-check depend on app-check-internal directly,\n       * we need to initialize app-check-internal after app-check is initialized to make it\n       * available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const appCheckInternalProvider = container.getProvider(\n            APP_CHECK_NAME_INTERNAL\n          );\n          appCheckInternalProvider.initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  firebase.INTERNAL.registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const platformLoggerProvider = container.getProvider('platform-logger');\n        return internalFactory(app, platformLoggerProvider);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  firebase.registerVersion(name, version);\n}\n\nregisterAppCheck(firebase as _FirebaseNamespace);\ninitializeDebugMode();\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    appCheck(app?: FirebaseApp): FirebaseAppCheck;\n  }\n  interface FirebaseApp {\n    appCheck(): FirebaseAppCheck;\n  }\n}\n"],"names":["ErrorFactory","Deferred","initializeRecaptcha","Logger","isIndexedDBAvailable","getGlobal","base64","getToken","issuedAtTime","getReCAPTCHAToken","Component","firebase"],"mappings":"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"}