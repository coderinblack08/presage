rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow write: if request.auth.uid == userId && !exists(/databases/$(database)/documents/usernames/$(request.resource.data.username));
      allow read: if true;
    }
    
    match /journals/{journalId} {
      allow write: if willBeOwner();
      allow read: if true;
    }

    match /emails/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /usernames/{username} {
      allow write: if request.auth.uid == request.resource.data.uid;
      allow read: if true;
    }

    function canCreateArticle() {
      let isOwner = isSignedIn() && request.auth.uid == request.resource.data.userId;
      let isNow = request.time == request.resource.data.createdAt;
      let isValidContent = !request.resource.data.keys().hasAny(["editorHTML"]) && request.resource.data.likeCount == 0 && request.resource.data.bookmarkCount == 0 && request.resource.data.shareCount == 0;
      
      return isValidContent && isNow && isOwner;
    }

    function canUpdateArticle() {
      let isOwner = isSignedIn() && request.auth.uid == request.resource.data.userId;
      let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(["likeCount", "bookmarkCount", "createdAt", "editorHTML"]);

      return isOwner && doesNotUpdateForbidden;
    }

    match /articles/{articleId} {
      allow create: if canCreateArticle();
      allow update: if canUpdateArticle();
      allow delete: if isOwner();
      allow read: if isOwner() || resource.data.isPublished == true;
    }

    match /{path=**}/comments/{id} {
      allow create: if request.resource.data.replyCount == 0 && willBeOwner() && request.resource.data.message != null && request.resource.data.message is string && request.resource.data.message.trim().size() > 0;
      allow read;
    }

    function canCreateReaction() {
      return request.auth.uid == request.resource.data.userId && request.resource.data.articleId != null && request.resource.data.keys().hasAny(["liked", "bookmarked", "userId", "articleId"]);
    }

    match /reactions/{reactionId} {
      allow write: if canCreateReaction() && request.resource.data.keys().hasAny(["liked", "bookmarked", "shared"]);
      allow read;
    }

    match /rewards/{rewardId} {
      allow write: if willBeOwner() && (request.resource.data.type in ["Form", "Shoutout", "Message"]);
      allow read: if true;
    }

    match /rewards/{rewardId}/secret/message {
      allow write: if get(/databases/$(database)/documents/rewards/$(rewardId)).data.userId == request.auth.uid;
      allow read: if false;
    }

    match /referrals/{referalId} {
      allow write: if willBeOwner() && request.resource.data.claimCount == 0;
      allow read;
    }
  }
}

function isUser(uid) {
  return isSignedIn() && request.auth.uid == uid;
}

function isSignedIn() {
  return request.auth.uid != null;
}

function isOwner(){
  return isUser(currentData().userId);
}

function willBeOwner(){
  return isUser(incomingData().userId);
}

function currentData() {
  return resource.data;
}

function incomingData() {
  return request.resource.data;
}
